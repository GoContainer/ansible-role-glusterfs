---
- set_fact:
    gluster_servers_ips_init: "{{ (gluster_servers_ips|default([])) + [hostvars[item].ansible_default_ipv4.address] }}"
    glusterfs_create_init: "{{ (glusterfs_create_init|default([])) + [hostvars[item].ansible_default_ipv4.address + ':' + gluster_brick_dir] }}"
  with_items: "{{ groups['all'] }}"

- set_fact:
    gluster_servers_ips_tmp: "{{ gluster_servers_ips_init|join('|') }}"
    glusterfs_create: "{{ gluster_servers_ips_init|join(' ') }}"

- name: Ensure Gluster brick and mount directories exist.
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0775
  with_items:
    - "{{ gluster_brick_dir }}"
    - "{{ gluster_mount_dir }}"

#################################################
#
# That is a lot of shell module call...
# Looks like a https://fr.wikipedia.org/wiki/Code_smell to me
#
# Could that be a case for using this instead ?
# http://docs.ansible.com/ansible/gluster_volume_module.html
#
#################################################
# Gluster volume configuration.
- name: Check if Gluster volumes already exist.
  shell: "gluster volume info"
  changed_when: false
  register: gluster_volume_info

- name: Connect to Gluster peers.
  shell: "gluster peer probe {{ item }}"
  register: gluster_peer_probe
  changed_when: "'already in peer list' not in gluster_peer_probe.stdout"
  failed_when: false
  with_items: "{{ gluster_servers_ips_tmp[:-1].split('|') }}"
  when: "inventory_hostname == groups.all[0] and 'Volume Name: gluster' not in gluster_volume_info.stdout"

- name: Create Gluster volume.
  shell: "gluster volume create {{ gluster_brick_name }} replica 2 transport tcp {{ glusterfs_create }} force"
  register: gluster_volume_create
  changed_when: "'successful' in gluster_volume_create.stdout"
  when: "inventory_hostname == groups.all[0] and 'Volume Name: gluster' not in gluster_volume_info.stdout"

- name: Ensure Gluster volume is started.
  shell: "gluster volume start {{ gluster_brick_name }}"
  register: gluster_volume_start
  changed_when: "'successful' in gluster_volume_start.stdout"
  when: "inventory_hostname == groups.all[0] and 'Volume Name: gluster' not in gluster_volume_info.stdout"

# Mount configuration.
- name: Ensure the Gluster volume is mounted.
  mount:
    name: "{{ gluster_mount_dir }}"
    src: "{{ groups.all[0] }}:/{{ gluster_brick_name }}"
    fstype: glusterfs
    opts: "defaults,_netdev"
    state: mounted